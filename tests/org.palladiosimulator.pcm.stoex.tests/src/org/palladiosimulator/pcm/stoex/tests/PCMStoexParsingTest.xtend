/*
 * generated by Xtext 2.24.0
 */
package org.palladiosimulator.pcm.stoex.tests

import com.google.inject.Inject
import de.uka.ipd.sdq.stoex.Expression
import de.uka.ipd.sdq.stoex.NamespaceReference
import de.uka.ipd.sdq.stoex.VariableReference
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.palladiosimulator.pcm.parameter.CharacterisedVariable
import org.palladiosimulator.pcm.parameter.VariableCharacterisationType

import static org.hamcrest.MatcherAssert.assertThat
import static org.hamcrest.Matchers.instanceOf
import static org.junit.jupiter.api.Assertions.*

@ExtendWith(InjectionExtension)
@InjectWith(PCMStoexInjectorProvider)
class PCMStoexParsingTest {
	@Inject
	ParseHelper<Expression> parseHelper
	
    @Test
    def void testCharacterisedVariable() {
        val result = parseHelper.parse('''
            a.VALUE
        ''')
        Assertions.assertNotNull(result)
        val errors = result.eResource.errors
        Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
        Assertions.assertTrue(result instanceof CharacterisedVariable, '''Result is no «CharacterisedVariable.simpleName»''')
    }
    
    @Test
    def void testCharacterisedVariableWithNamespace() {
        val result = parseHelper.parse('''
            a.b.VALUE
        ''')
        Assertions.assertNotNull(result)
        val errors = result.eResource.errors
        Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
        assertThat(result, instanceOf(CharacterisedVariable))
        val variable = result as CharacterisedVariable
        assertThat(variable.id_Variable, instanceOf(NamespaceReference))
        val namespace = variable.id_Variable as NamespaceReference
        assertEquals(namespace.referenceName, "a")
        assertThat(namespace.innerReference_NamespaceReference, instanceOf(VariableReference))
        assertEquals(namespace.innerReference_NamespaceReference.referenceName, "b")
        assertEquals(variable.characterisationType, VariableCharacterisationType.VALUE)
    }
}
